{"remainingRequest":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\babel-loader\\lib\\index.js!E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Docker\\prueba-tecnica\\frontend\\app\\src\\views\\List_processes.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\src\\views\\List_processes.vue","mtime":1631170049955},{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630935378686},{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1630935388662},{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1630935378424},{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630935378686},{"path":"E:\\Docker\\prueba-tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1630935388998}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkU6L0RvY2tlci9wcnVlYmEtdGVjbmljYS9mcm9udGVuZC9hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0xpc3RfcHJvY2Vzc2VzJywKCiAgLypwcm9wczogew0KICAgICAgbXNnOiBTdHJpbmcNCiAgfSwqLwogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICBjb25zb2xlLmxvZyh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpOwogICAgcmV0dXJuIHsKICAgICAgcHJvY2Vzc2VzOiBbXSwKICAgICAgc3RhdHVzOiBbIiIsICJOT1QgU1RBUlRFRCIsICJQUk9DRVNTSU5HIiwgIkZJTklTSEVEIiwgIkVSUk9SIl0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRfcHJvY2Vzc2VzOiBmdW5jdGlvbiBnZXRfcHJvY2Vzc2VzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgdXJsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVybCA9ICJodHRwOi8vIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArICI6ODA4MS9hcGkvcHJvY2VzcyI7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh1cmwsIHt9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfdGhpcy5wcm9jZXNzZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc3Rhcl9wcm9jZXNzZXM6IGZ1bmN0aW9uIHN0YXJfcHJvY2Vzc2VzKGlkKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHVybDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdXJsID0gImh0dHA6Ly8iICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgIjo4MDgxL2FwaS9wcm9jZXNzLyIgKyBpZCArICIvc3RhcnQiOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX3RoaXMyLmdldF9wcm9jZXNzZXMoKTsgLy9SZWZyZXNjYW1vcyBsYSBsaXN0YQoKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRfcHJvY2Vzc2VzKCk7CiAgfQp9Ow=="},{"version":3,"sources":["List_processes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;;AAEA;AACA;AACA;AACA,EAAA,IALA,kBAKA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,MAAA,EAAA,CAAA,EAAA,EAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EAAA,OAAA;AAFA,KAAA;AAIA,GAXA;AAYA,EAAA,OAAA,EAAA;AAEA,IAAA,aAFA,2BAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,YAAA,MAAA,CAAA,QAAA,CAAA,QAAA,GAAA,mBADA;AAAA;AAAA,uBAEA,KAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAEA,IAFA,CAEA,UAAA,QAAA;AAAA,yBAAA,QAAA,CAAA,IAAA,EAAA;AAAA,iBAFA,EAGA,IAHA,CAGA,UAAA,IAAA,EAAA;AACA,yBAAA,IAAA;AACA,iBALA,CAFA;;AAAA;AAEA,gBAAA,KAAA,CAAA,SAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAVA;AAYA,IAAA,cAZA,0BAYA,EAZA,EAYA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,YAAA,MAAA,CAAA,QAAA,CAAA,QAAA,GAAA,oBAAA,GAAA,EAAA,GAAA,QADA;AAAA;AAAA,uBAEA,KAAA,CAAA,GAAA,EAAA;AACA,kBAAA,MAAA,EAAA;AADA,iBAAA,CAAA,CAGA,IAHA,CAGA,UAAA,QAAA;AAAA,yBAAA,QAAA,CAAA,IAAA,EAAA;AAAA,iBAHA,EAIA,IAJA,CAIA,UAAA,IAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,iBANA,CAFA;;AAAA;AASA,gBAAA,MAAA,CAAA,aAAA,GATA,CASA;;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAtBA,GAZA;AAqCA,EAAA,OArCA,qBAqCA;AACA,SAAA,aAAA;AACA;AAvCA,CAAA","sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <div v-if=\"processes.length == 0\">\r\n      <div class=\"row text-center\">\r\n        <div class=\"col-6 offset-3\">\r\n          <div class=\"loader\"></div>\r\n          <div>Loading list ...</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <table class=\"table table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th>Process ID</th>\r\n            <th>Input</th>\r\n            <th>Output</th>\r\n            <th>Created at</th>\r\n            <th>Started at</th>\r\n            <th>Finished at</th>\r\n            <th>Status</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody v-for=\"process in processes\" :key=\"process.id\">\r\n          <tr>\r\n            <td>{{process.id}}</td>\r\n            <td>{{process.input}}</td>\r\n            <td>{{process.output}}</td>\r\n\r\n            <td>{{process.created_at.date}}</td>\r\n\r\n            <td v-if=\"process.started_at !== null\">\r\n              {{process.started_at.date}}\r\n            </td>\r\n            <td v-else></td>\r\n\r\n            <td v-if=\"process.finished_at !== null\">\r\n              {{process.finished_at.date}}\r\n            </td>\r\n            <td v-else></td>\r\n\r\n            <td>\r\n              {{status[process.status]}}\r\n            </td>\r\n\r\n            <td v-if=\"process.status == 1\">\r\n              <button @click=\"star_processes(process.id)\">â–¶ Start</button>\r\n            </td>\r\n            <td v-else></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'List_processes',\r\n  /*props: {\r\n      msg: String\r\n  },*/\r\n  data() {\r\n    console.log(window.location.hostname)\r\n    return {\r\n      processes: [],\r\n      status: [\"\",\"NOT STARTED\",\"PROCESSING\",\"FINISHED\",\"ERROR\"]\r\n    }\r\n  },\r\n  methods:{\r\n\r\n    async  get_processes(){\r\n      const url = \"http://\"+ window.location.hostname +\":8081/api/process\"\r\n      this.processes = await fetch(url, {\r\n      }) \r\n        .then(response => response.json())\r\n        .then(data => {\r\n          return data;\r\n        });\r\n    },\r\n\r\n    async star_processes(id){\r\n      const url = \"http://\"+ window.location.hostname +\":8081/api/process/\"+ id +\"/start\"\r\n      await fetch(url, {\r\n        method: 'POST',\r\n      }) \r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log( data)\r\n        });\r\n      this.get_processes() //Refrescamos la lista\r\n    }\r\n\r\n  },\r\n  created(){\r\n    this.get_processes()\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n  table{\r\n    font-size: 18px;\r\n    text-align: center;\r\n  }\r\n  td{\r\n    min-width: 150px;\r\n  }\r\n  .loader {\r\n    margin: auto;\r\n    border: 16px solid #f3f3f3; /* Light grey */\r\n    border-top: 16px solid #000; /* Blue */\r\n    border-radius: 50%;\r\n    width: 120px;\r\n    height: 120px;\r\n    animation: spin 2s linear infinite;\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n</style>"],"sourceRoot":"src/views"}]}