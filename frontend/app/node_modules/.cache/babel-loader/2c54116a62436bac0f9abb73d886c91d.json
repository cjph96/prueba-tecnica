{"remainingRequest":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\thread-loader\\dist\\cjs.js!E:\\prueba_tecnica\\frontend\\app\\node_modules\\babel-loader\\lib\\index.js!E:\\prueba_tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\prueba_tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\prueba_tecnica\\frontend\\app\\src\\views\\List_processes.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\prueba_tecnica\\frontend\\app\\src\\views\\List_processes.vue","mtime":1628629719781},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":315536400000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkU6L3BydWViYV90ZWNuaWNhL2Zyb250ZW5kL2FwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnTGlzdF9wcm9jZXNzZXMnLAoKICAvKnByb3BzOiB7CiAgICAgIG1zZzogU3RyaW5nCiAgfSwqLwogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICBjb25zb2xlLmxvZyh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpOwogICAgcmV0dXJuIHsKICAgICAgcHJvY2Vzc2VzOiBbXQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldF9wcm9jZXNzZXM6IGZ1bmN0aW9uIGdldF9wcm9jZXNzZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciB1cmw7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdXJsID0gImh0dHA6Ly8iICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgIjo4MDgxL2FwaS9wcm9jZXNzIjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwge30pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF90aGlzLnByb2Nlc3NlcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzdGFyX3Byb2Nlc3NlczogZnVuY3Rpb24gc3Rhcl9wcm9jZXNzZXMoaWQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgdXJsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1cmwgPSAiaHR0cDovLyIgKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKyAiOjgwODEvYXBpL3Byb2Nlc3MvIiArIGlkICsgIi9zdGFydCI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2godXJsLCB7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnCiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfdGhpczIuZ2V0X3Byb2Nlc3NlcygpOyAvL1JlZnJlc2NhbW9zIGxhIGxpc3RhCgoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldF9wcm9jZXNzZXMoKTsKICB9Cn07"},{"version":3,"sources":["List_processes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;;AAEA;AACA;AACA;AACA,EAAA,IALA,kBAKA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAGA,GAVA;AAWA,EAAA,OAAA,EAAA;AAEA,IAAA,aAFA,2BAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,YAAA,MAAA,CAAA,QAAA,CAAA,QAAA,GAAA,mBADA;AAAA;AAAA,uBAEA,KAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAEA,IAFA,CAEA,UAAA,QAAA;AAAA,yBAAA,QAAA,CAAA,IAAA,EAAA;AAAA,iBAFA,EAGA,IAHA,CAGA,UAAA,IAAA,EAAA;AACA,yBAAA,IAAA;AACA,iBALA,CAFA;;AAAA;AAEA,gBAAA,KAAA,CAAA,SAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAVA;AAYA,IAAA,cAZA,0BAYA,EAZA,EAYA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,YAAA,MAAA,CAAA,QAAA,CAAA,QAAA,GAAA,oBAAA,GAAA,EAAA,GAAA,QADA;AAAA;AAAA,uBAEA,KAAA,CAAA,GAAA,EAAA;AACA,kBAAA,MAAA,EAAA;AADA,iBAAA,CAAA,CAGA,IAHA,CAGA,UAAA,QAAA;AAAA,yBAAA,QAAA,CAAA,IAAA,EAAA;AAAA,iBAHA,EAIA,IAJA,CAIA,UAAA,IAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,iBANA,CAFA;;AAAA;AASA,gBAAA,MAAA,CAAA,aAAA,GATA,CASA;;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAtBA,GAXA;AAoCA,EAAA,OApCA,qBAoCA;AACA,SAAA,aAAA;AACA;AAtCA,CAAA","sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div v-if=\"processes.length == 0\">\n      <div class=\"row text-center\">\n        <div class=\"col-6 offset-3\">\n          <div class=\"loader\"></div>\n          <div>Loading list ...</div>\n        </div>\n      </div>\n    </div>\n    <div v-else>\n      <table class=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>Process ID</th>\n            <th>Input</th>\n            <th>Output</th>\n            <th>Created at</th>\n            <th>Started at</th>\n            <th>Finished at</th>\n            <th>Status</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody v-for=\"process in processes\" :key=\"process.id\">\n          <tr>\n            <td>{{process.id}}</td>\n            <td>{{process.input}}</td>\n            <td>{{process.output}}</td>\n\n            <td>{{process.created_at.date}}</td>\n\n            <td v-if=\"process.started_at !== null\">\n              {{process.started_at.date}}\n            </td>\n            <td v-else></td>\n\n            <td v-if=\"process.finished_at !== null\">\n              {{process.finished_at.date}}\n            </td>\n            <td v-else></td>\n\n            <td v-if=\"process.status == 1\">\n              NOT STARTED\n            </td>\n            <td v-if=\"process.status == 2\">\n              PROCESSING\n            </td>\n            <td v-if=\"process.status == 3\">\n              FINISHED\n            </td>\n            <td v-if=\"process.status == 4\">\n              ERROR\n            </td>\n\n            <td v-if=\"process.status == 1\">\n              <button @click=\"star_processes(process.id)\">â–¶ Start</button>\n            </td>\n            <td v-else></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'List_processes',\n  /*props: {\n      msg: String\n  },*/\n  data() {\n    console.log(window.location.hostname)\n    return {\n      processes: []\n    }\n  },\n  methods:{\n\n    async  get_processes(){\n      const url = \"http://\"+ window.location.hostname +\":8081/api/process\"\n      this.processes = await fetch(url, {\n      }) \n        .then(response => response.json())\n        .then(data => {\n          return data;\n        });\n    },\n\n    async star_processes(id){\n      const url = \"http://\"+ window.location.hostname +\":8081/api/process/\"+ id +\"/start\"\n      await fetch(url, {\n        method: 'POST',\n      }) \n        .then(response => response.json())\n        .then(data => {\n          console.log( data)\n        });\n      this.get_processes() //Refrescamos la lista\n    }\n\n  },\n  created(){\n    this.get_processes()\n  }\n}\n\n</script>\n\n<style>\n  table{\n    font-size: 18px;\n    text-align: center;\n  }\n  td{\n    min-width: 150px;\n  }\n  .loader {\n    margin: auto;\n    border: 16px solid #f3f3f3; /* Light grey */\n    border-top: 16px solid #000; /* Blue */\n    border-radius: 50%;\n    width: 120px;\n    height: 120px;\n    animation: spin 2s linear infinite;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n</style>"],"sourceRoot":"src/views"}]}