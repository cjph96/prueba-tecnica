{"remainingRequest":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\prueba_tecnica\\frontend\\app\\src\\views\\List_processes.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\prueba_tecnica\\frontend\\app\\src\\views\\List_processes.vue","mtime":1628597887146},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":315536400000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\prueba_tecnica\\frontend\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0xpc3RfcHJvY2Vzc2VzJywKICAvKnByb3BzOiB7CiAgICAgIG1zZzogU3RyaW5nCiAgfSwqLwogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwcm9jZXNzZXM6IFtdCiAgICB9CiAgfSwKICBtZXRob2RzOnsKCiAgICBhc3luYyAgZ2V0X3Byb2Nlc3NlcygpewogICAgICB0aGlzLnByb2Nlc3NlcyA9IGF3YWl0IGZldGNoKCJodHRwOi8vMTI3LjAuMC4xOjgwODEvYXBpL3Byb2Nlc3MiLCB7CiAgICAgICAgLy9tb2RlOiAnbm8tY29ycycKICAgICAgfSkgCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKQogICAgICAgIC50aGVuKGRhdGEgPT4gewogICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfSk7CiAgICB9CgogIH0sCiAgY3JlYXRlZCgpewogICAgdGhpcy5nZXRfcHJvY2Vzc2VzKCkKICB9Cn0KCg=="},{"version":3,"sources":["List_processes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"List_processes.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"list_processes\">\n    <table>\n      <thead>\n        <tr>\n          <th>Process ID</th>\n          <th>Input</th>\n          <th>Output</th>\n          <th>Created at</th>\n          <th>Started at</th>\n          <th>Finished at</th>\n          <th>Status</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody v-for=\"process in processes\" :key=\"process.id\">\n        <tr>\n          <td>{{process.id}}</td>\n          <td>{{process.input}}</td>\n          <td>{{process.output}}</td>\n\n          <td>{{process.created_at.date}}</td>\n\n          <td v-if=\"process.started_at !== null\">\n            {{process.started_at.data}}\n          </td>\n          <td v-else></td>\n\n          <td v-if=\"process.finished_at !== null\">\n            {{process.finished_at.data}}\n          </td>\n          <td v-else></td>\n\n          <td v-if=\"process.status == 1\">\n            NOT STARTED\n          </td>\n          <td v-if=\"process.status == 2\">\n            PROCESSING\n          </td>\n          <td v-if=\"process.status == 3\">\n            FINISHED\n          </td>\n\n          <td v-if=\"process.status == 1\">\n            <button>Action</button>\n          </td>\n          <td v-else></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'List_processes',\n  /*props: {\n      msg: String\n  },*/\n  data() {\n    return {\n      processes: []\n    }\n  },\n  methods:{\n\n    async  get_processes(){\n      this.processes = await fetch(\"http://127.0.0.1:8081/api/process\", {\n        //mode: 'no-cors'\n      }) \n        .then(response => response.json())\n        .then(data => {\n          return data;\n        });\n    }\n\n  },\n  created(){\n    this.get_processes()\n  }\n}\n\n</script>"]}]}